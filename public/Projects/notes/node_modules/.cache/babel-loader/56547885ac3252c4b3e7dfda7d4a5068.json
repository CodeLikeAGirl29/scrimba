{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.italicCommand = void 0;\n\nvar MarkdownUtil_1 = require(\"../../util/MarkdownUtil\");\n\nexports.italicCommand = {\n  buttonProps: {\n    \"aria-label\": \"Add italic text\"\n  },\n  execute: function (_a) {\n    var initialState = _a.initialState,\n        textApi = _a.textApi; // Adjust the selection to encompass the whole word if the caret is inside one\n\n    var newSelectionRange = MarkdownUtil_1.selectWord({\n      text: initialState.text,\n      selection: initialState.selection\n    });\n    var state1 = textApi.setSelectionRange(newSelectionRange); // Replaces the current selection with the italic mark up\n\n    var state2 = textApi.replaceSelection(\"*\" + state1.selectedText + \"*\"); // Adjust the selection to not contain the *\n\n    textApi.setSelectionRange({\n      start: state2.selection.end - 1 - state1.selectedText.length,\n      end: state2.selection.end - 1\n    });\n  },\n  handleKeyCommand: function (e) {\n    return (e.ctrlKey || e.metaKey) && e.key == \"i\";\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","italicCommand","MarkdownUtil_1","require","buttonProps","execute","_a","initialState","textApi","newSelectionRange","selectWord","text","selection","state1","setSelectionRange","state2","replaceSelection","selectedText","start","end","length","handleKeyCommand","e","ctrlKey","metaKey","key"],"sources":["C:/Users/thewi/Downloads/scrimba/notes/node_modules/react-mde/lib/js/commands/default-commands/italicCommand.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.italicCommand = void 0;\nvar MarkdownUtil_1 = require(\"../../util/MarkdownUtil\");\nexports.italicCommand = {\n    buttonProps: { \"aria-label\": \"Add italic text\" },\n    execute: function (_a) {\n        var initialState = _a.initialState, textApi = _a.textApi;\n        // Adjust the selection to encompass the whole word if the caret is inside one\n        var newSelectionRange = MarkdownUtil_1.selectWord({\n            text: initialState.text,\n            selection: initialState.selection\n        });\n        var state1 = textApi.setSelectionRange(newSelectionRange);\n        // Replaces the current selection with the italic mark up\n        var state2 = textApi.replaceSelection(\"*\" + state1.selectedText + \"*\");\n        // Adjust the selection to not contain the *\n        textApi.setSelectionRange({\n            start: state2.selection.end - 1 - state1.selectedText.length,\n            end: state2.selection.end - 1\n        });\n    },\n    handleKeyCommand: function (e) { return (e.ctrlKey || e.metaKey) && e.key == \"i\"; }\n};\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,IAAIC,cAAc,GAAGC,OAAO,CAAC,yBAAD,CAA5B;;AACAJ,OAAO,CAACE,aAAR,GAAwB;EACpBG,WAAW,EAAE;IAAE,cAAc;EAAhB,CADO;EAEpBC,OAAO,EAAE,UAAUC,EAAV,EAAc;IACnB,IAAIC,YAAY,GAAGD,EAAE,CAACC,YAAtB;IAAA,IAAoCC,OAAO,GAAGF,EAAE,CAACE,OAAjD,CADmB,CAEnB;;IACA,IAAIC,iBAAiB,GAAGP,cAAc,CAACQ,UAAf,CAA0B;MAC9CC,IAAI,EAAEJ,YAAY,CAACI,IAD2B;MAE9CC,SAAS,EAAEL,YAAY,CAACK;IAFsB,CAA1B,CAAxB;IAIA,IAAIC,MAAM,GAAGL,OAAO,CAACM,iBAAR,CAA0BL,iBAA1B,CAAb,CAPmB,CAQnB;;IACA,IAAIM,MAAM,GAAGP,OAAO,CAACQ,gBAAR,CAAyB,MAAMH,MAAM,CAACI,YAAb,GAA4B,GAArD,CAAb,CATmB,CAUnB;;IACAT,OAAO,CAACM,iBAAR,CAA0B;MACtBI,KAAK,EAAEH,MAAM,CAACH,SAAP,CAAiBO,GAAjB,GAAuB,CAAvB,GAA2BN,MAAM,CAACI,YAAP,CAAoBG,MADhC;MAEtBD,GAAG,EAAEJ,MAAM,CAACH,SAAP,CAAiBO,GAAjB,GAAuB;IAFN,CAA1B;EAIH,CAjBmB;EAkBpBE,gBAAgB,EAAE,UAAUC,CAAV,EAAa;IAAE,OAAO,CAACA,CAAC,CAACC,OAAF,IAAaD,CAAC,CAACE,OAAhB,KAA4BF,CAAC,CAACG,GAAF,IAAS,GAA5C;EAAkD;AAlB/D,CAAxB"},"metadata":{},"sourceType":"script"}
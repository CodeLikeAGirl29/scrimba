{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.codeCommand = void 0;\n\nvar MarkdownUtil_1 = require(\"../../util/MarkdownUtil\");\n\nexports.codeCommand = {\n  buttonProps: {\n    \"aria-label\": \"Insert code\"\n  },\n  execute: function (_a) {\n    var initialState = _a.initialState,\n        textApi = _a.textApi; // Adjust the selection to encompass the whole word if the caret is inside one\n\n    var newSelectionRange = MarkdownUtil_1.selectWord({\n      text: initialState.text,\n      selection: initialState.selection\n    });\n    var state1 = textApi.setSelectionRange(newSelectionRange); // when there's no breaking line\n\n    if (state1.selectedText.indexOf(\"\\n\") === -1) {\n      textApi.replaceSelection(\"`\" + state1.selectedText + \"`\"); // Adjust the selection to not contain the **\n\n      var selectionStart_1 = state1.selection.start + 1;\n      var selectionEnd_1 = selectionStart_1 + state1.selectedText.length;\n      textApi.setSelectionRange({\n        start: selectionStart_1,\n        end: selectionEnd_1\n      });\n      return;\n    }\n\n    var breaksBeforeCount = MarkdownUtil_1.getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n    var breaksAfterCount = MarkdownUtil_1.getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n    textApi.replaceSelection(breaksBefore + \"```\\n\" + state1.selectedText + \"\\n```\" + breaksAfter);\n    var selectionStart = state1.selection.start + breaksBeforeCount + 4;\n    var selectionEnd = selectionStart + state1.selectedText.length;\n    textApi.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd\n    });\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","codeCommand","MarkdownUtil_1","require","buttonProps","execute","_a","initialState","textApi","newSelectionRange","selectWord","text","selection","state1","setSelectionRange","selectedText","indexOf","replaceSelection","selectionStart_1","start","selectionEnd_1","length","end","breaksBeforeCount","getBreaksNeededForEmptyLineBefore","breaksBefore","Array","join","breaksAfterCount","getBreaksNeededForEmptyLineAfter","breaksAfter","selectionStart","selectionEnd"],"sources":["C:/Users/thewi/Downloads/scrimba/notes/node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.codeCommand = void 0;\nvar MarkdownUtil_1 = require(\"../../util/MarkdownUtil\");\nexports.codeCommand = {\n    buttonProps: { \"aria-label\": \"Insert code\" },\n    execute: function (_a) {\n        var initialState = _a.initialState, textApi = _a.textApi;\n        // Adjust the selection to encompass the whole word if the caret is inside one\n        var newSelectionRange = MarkdownUtil_1.selectWord({\n            text: initialState.text,\n            selection: initialState.selection\n        });\n        var state1 = textApi.setSelectionRange(newSelectionRange);\n        // when there's no breaking line\n        if (state1.selectedText.indexOf(\"\\n\") === -1) {\n            textApi.replaceSelection(\"`\" + state1.selectedText + \"`\");\n            // Adjust the selection to not contain the **\n            var selectionStart_1 = state1.selection.start + 1;\n            var selectionEnd_1 = selectionStart_1 + state1.selectedText.length;\n            textApi.setSelectionRange({\n                start: selectionStart_1,\n                end: selectionEnd_1\n            });\n            return;\n        }\n        var breaksBeforeCount = MarkdownUtil_1.getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n        var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n        var breaksAfterCount = MarkdownUtil_1.getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n        var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n        textApi.replaceSelection(breaksBefore + \"```\\n\" + state1.selectedText + \"\\n```\" + breaksAfter);\n        var selectionStart = state1.selection.start + breaksBeforeCount + 4;\n        var selectionEnd = selectionStart + state1.selectedText.length;\n        textApi.setSelectionRange({\n            start: selectionStart,\n            end: selectionEnd\n        });\n    }\n};\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;AACA,IAAIC,cAAc,GAAGC,OAAO,CAAC,yBAAD,CAA5B;;AACAJ,OAAO,CAACE,WAAR,GAAsB;EAClBG,WAAW,EAAE;IAAE,cAAc;EAAhB,CADK;EAElBC,OAAO,EAAE,UAAUC,EAAV,EAAc;IACnB,IAAIC,YAAY,GAAGD,EAAE,CAACC,YAAtB;IAAA,IAAoCC,OAAO,GAAGF,EAAE,CAACE,OAAjD,CADmB,CAEnB;;IACA,IAAIC,iBAAiB,GAAGP,cAAc,CAACQ,UAAf,CAA0B;MAC9CC,IAAI,EAAEJ,YAAY,CAACI,IAD2B;MAE9CC,SAAS,EAAEL,YAAY,CAACK;IAFsB,CAA1B,CAAxB;IAIA,IAAIC,MAAM,GAAGL,OAAO,CAACM,iBAAR,CAA0BL,iBAA1B,CAAb,CAPmB,CAQnB;;IACA,IAAII,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4B,IAA5B,MAAsC,CAAC,CAA3C,EAA8C;MAC1CR,OAAO,CAACS,gBAAR,CAAyB,MAAMJ,MAAM,CAACE,YAAb,GAA4B,GAArD,EAD0C,CAE1C;;MACA,IAAIG,gBAAgB,GAAGL,MAAM,CAACD,SAAP,CAAiBO,KAAjB,GAAyB,CAAhD;MACA,IAAIC,cAAc,GAAGF,gBAAgB,GAAGL,MAAM,CAACE,YAAP,CAAoBM,MAA5D;MACAb,OAAO,CAACM,iBAAR,CAA0B;QACtBK,KAAK,EAAED,gBADe;QAEtBI,GAAG,EAAEF;MAFiB,CAA1B;MAIA;IACH;;IACD,IAAIG,iBAAiB,GAAGrB,cAAc,CAACsB,iCAAf,CAAiDX,MAAM,CAACF,IAAxD,EAA8DE,MAAM,CAACD,SAAP,CAAiBO,KAA/E,CAAxB;IACA,IAAIM,YAAY,GAAGC,KAAK,CAACH,iBAAiB,GAAG,CAArB,CAAL,CAA6BI,IAA7B,CAAkC,IAAlC,CAAnB;IACA,IAAIC,gBAAgB,GAAG1B,cAAc,CAAC2B,gCAAf,CAAgDhB,MAAM,CAACF,IAAvD,EAA6DE,MAAM,CAACD,SAAP,CAAiBU,GAA9E,CAAvB;IACA,IAAIQ,WAAW,GAAGJ,KAAK,CAACE,gBAAgB,GAAG,CAApB,CAAL,CAA4BD,IAA5B,CAAiC,IAAjC,CAAlB;IACAnB,OAAO,CAACS,gBAAR,CAAyBQ,YAAY,GAAG,OAAf,GAAyBZ,MAAM,CAACE,YAAhC,GAA+C,OAA/C,GAAyDe,WAAlF;IACA,IAAIC,cAAc,GAAGlB,MAAM,CAACD,SAAP,CAAiBO,KAAjB,GAAyBI,iBAAzB,GAA6C,CAAlE;IACA,IAAIS,YAAY,GAAGD,cAAc,GAAGlB,MAAM,CAACE,YAAP,CAAoBM,MAAxD;IACAb,OAAO,CAACM,iBAAR,CAA0B;MACtBK,KAAK,EAAEY,cADe;MAEtBT,GAAG,EAAEU;IAFiB,CAA1B;EAIH;AAjCiB,CAAtB"},"metadata":{},"sourceType":"script"}
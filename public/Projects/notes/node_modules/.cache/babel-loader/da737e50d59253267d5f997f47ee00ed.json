{"ast":null,"code":"\"use strict\";\n/*!\n * The MIT License\n   Copyright (c) 2018 Dmitriy Kubyshkin\n   Copied from https://github.com/grassator/insert-text-at-cursor\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.insertText = void 0;\n/**\n * Inserts the given text at the cursor. If the element contains a selection, the selection\n * will be replaced by the text.\n */\n\nfunction insertText(input, text) {\n  // Most of the used APIs only work with the field selected\n  input.focus(); // IE 8-10\n\n  if (document.selection) {\n    var ieRange = document.selection.createRange();\n    ieRange.text = text; // Move cursor after the inserted text\n\n    ieRange.collapse(false\n    /* to the end */\n    );\n    ieRange.select();\n    return;\n  } // Webkit + Edge\n\n\n  var isSuccess = document.execCommand(\"insertText\", false, text);\n\n  if (!isSuccess) {\n    var start = input.selectionStart;\n    var end = input.selectionEnd; // Firefox (non-standard method)\n\n    if (typeof input.setRangeText === \"function\") {\n      input.setRangeText(text);\n    } else {\n      if (canManipulateViaTextNodes(input)) {\n        var textNode = document.createTextNode(text);\n        var node = input.firstChild; // If textarea is empty, just insert the text\n\n        if (!node) {\n          input.appendChild(textNode);\n        } else {\n          // Otherwise we need to find a nodes for start and end\n          var offset = 0;\n          var startNode = null;\n          var endNode = null; // To make a change we just need a Range, not a Selection\n\n          var range = document.createRange();\n\n          while (node && (startNode === null || endNode === null)) {\n            var nodeLength = node.nodeValue.length; // if start of the selection falls into current node\n\n            if (start >= offset && start <= offset + nodeLength) {\n              range.setStart(startNode = node, start - offset);\n            } // if end of the selection falls into current node\n\n\n            if (end >= offset && end <= offset + nodeLength) {\n              range.setEnd(endNode = node, end - offset);\n            }\n\n            offset += nodeLength;\n            node = node.nextSibling;\n          } // If there is some text selected, remove it as we should replace it\n\n\n          if (start !== end) {\n            range.deleteContents();\n          } // Finally insert a new node. The browser will automatically\n          // split start and end nodes into two if necessary\n\n\n          range.insertNode(textNode);\n        }\n      } else {\n        // For the text input the only way is to replace the whole value :(\n        var value = input.value;\n        input.value = value.slice(0, start) + text + value.slice(end);\n      }\n    } // Correct the cursor position to be at the end of the insertion\n\n\n    input.setSelectionRange(start + text.length, start + text.length); // Notify any possible listeners of the change\n\n    var e = document.createEvent(\"UIEvent\");\n    e.initEvent(\"input\", true, false);\n    input.dispatchEvent(e);\n  }\n}\n\nexports.insertText = insertText;\n\nfunction canManipulateViaTextNodes(input) {\n  if (input.nodeName !== \"TEXTAREA\") {\n    return false;\n  }\n\n  var browserSupportsTextareaTextNodes;\n\n  if (typeof browserSupportsTextareaTextNodes === \"undefined\") {\n    var textarea = document.createElement(\"textarea\");\n    textarea.value = \"1\";\n    browserSupportsTextareaTextNodes = !!textarea.firstChild;\n  }\n\n  return browserSupportsTextareaTextNodes;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","insertText","input","text","focus","document","selection","ieRange","createRange","collapse","select","isSuccess","execCommand","start","selectionStart","end","selectionEnd","setRangeText","canManipulateViaTextNodes","textNode","createTextNode","node","firstChild","appendChild","offset","startNode","endNode","range","nodeLength","nodeValue","length","setStart","setEnd","nextSibling","deleteContents","insertNode","slice","setSelectionRange","e","createEvent","initEvent","dispatchEvent","nodeName","browserSupportsTextareaTextNodes","textarea","createElement"],"sources":["C:/Users/thewi/Downloads/scrimba/notes/node_modules/react-mde/lib/js/util/InsertTextAtPosition.js"],"sourcesContent":["\"use strict\";\n/*!\n * The MIT License\n   Copyright (c) 2018 Dmitriy Kubyshkin\n   Copied from https://github.com/grassator/insert-text-at-cursor\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.insertText = void 0;\n/**\n * Inserts the given text at the cursor. If the element contains a selection, the selection\n * will be replaced by the text.\n */\nfunction insertText(input, text) {\n    // Most of the used APIs only work with the field selected\n    input.focus();\n    // IE 8-10\n    if (document.selection) {\n        var ieRange = document.selection.createRange();\n        ieRange.text = text;\n        // Move cursor after the inserted text\n        ieRange.collapse(false /* to the end */);\n        ieRange.select();\n        return;\n    }\n    // Webkit + Edge\n    var isSuccess = document.execCommand(\"insertText\", false, text);\n    if (!isSuccess) {\n        var start = input.selectionStart;\n        var end = input.selectionEnd;\n        // Firefox (non-standard method)\n        if (typeof input.setRangeText === \"function\") {\n            input.setRangeText(text);\n        }\n        else {\n            if (canManipulateViaTextNodes(input)) {\n                var textNode = document.createTextNode(text);\n                var node = input.firstChild;\n                // If textarea is empty, just insert the text\n                if (!node) {\n                    input.appendChild(textNode);\n                }\n                else {\n                    // Otherwise we need to find a nodes for start and end\n                    var offset = 0;\n                    var startNode = null;\n                    var endNode = null;\n                    // To make a change we just need a Range, not a Selection\n                    var range = document.createRange();\n                    while (node && (startNode === null || endNode === null)) {\n                        var nodeLength = node.nodeValue.length;\n                        // if start of the selection falls into current node\n                        if (start >= offset && start <= offset + nodeLength) {\n                            range.setStart((startNode = node), start - offset);\n                        }\n                        // if end of the selection falls into current node\n                        if (end >= offset && end <= offset + nodeLength) {\n                            range.setEnd((endNode = node), end - offset);\n                        }\n                        offset += nodeLength;\n                        node = node.nextSibling;\n                    }\n                    // If there is some text selected, remove it as we should replace it\n                    if (start !== end) {\n                        range.deleteContents();\n                    }\n                    // Finally insert a new node. The browser will automatically\n                    // split start and end nodes into two if necessary\n                    range.insertNode(textNode);\n                }\n            }\n            else {\n                // For the text input the only way is to replace the whole value :(\n                var value = input.value;\n                input.value = value.slice(0, start) + text + value.slice(end);\n            }\n        }\n        // Correct the cursor position to be at the end of the insertion\n        input.setSelectionRange(start + text.length, start + text.length);\n        // Notify any possible listeners of the change\n        var e = document.createEvent(\"UIEvent\");\n        e.initEvent(\"input\", true, false);\n        input.dispatchEvent(e);\n    }\n}\nexports.insertText = insertText;\nfunction canManipulateViaTextNodes(input) {\n    if (input.nodeName !== \"TEXTAREA\") {\n        return false;\n    }\n    var browserSupportsTextareaTextNodes;\n    if (typeof browserSupportsTextareaTextNodes === \"undefined\") {\n        var textarea = document.createElement(\"textarea\");\n        textarea.value = \"1\";\n        browserSupportsTextareaTextNodes = !!textarea.firstChild;\n    }\n    return browserSupportsTextareaTextNodes;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
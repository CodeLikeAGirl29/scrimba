{"ast":null,"code":"\"use strict\";\n/* jshint browser: true */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCaretCoordinates = void 0; // We'll copy the properties below into the mirror div.\n// Note that some browsers, such as Firefox, do not concatenate properties\n// into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\n// so we have to list every single property explicitly.\n\nvar properties = [\"direction\", \"boxSizing\", \"width\", \"height\", \"overflowX\", \"overflowY\", \"borderTopWidth\", \"borderRightWidth\", \"borderBottomWidth\", \"borderLeftWidth\", \"borderStyle\", \"paddingTop\", \"paddingRight\", \"paddingBottom\", \"paddingLeft\", // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n\"fontStyle\", \"fontVariant\", \"fontWeight\", \"fontStretch\", \"fontSize\", \"fontSizeAdjust\", \"lineHeight\", \"fontFamily\", \"textAlign\", \"textTransform\", \"textIndent\", \"textDecoration\", \"letterSpacing\", \"wordSpacing\", \"tabSize\", \"MozTabSize\"];\nvar isBrowser = typeof window !== \"undefined\";\nvar isFirefox = isBrowser && window.mozInnerScreenX != null;\n\nfunction getCaretCoordinates(element, append) {\n  if (!isBrowser) {\n    throw new Error(\"getCaretCoordinates should only be called in a browser\");\n  } // The mirror div will replicate the textarea's style\n\n\n  var div = document.createElement(\"div\");\n  div.id = \"input-textarea-caret-position-mirror-div\";\n  document.body.appendChild(div);\n  var style = div.style;\n  var computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle; // currentStyle for IE < 9\n  // Default textarea styles\n\n  style.whiteSpace = \"pre-wrap\";\n  style.wordWrap = \"break-word\"; // only for textarea-s\n  // Position off-screen\n\n  style.position = \"absolute\"; // required to return coordinates properly\n\n  style.visibility = \"hidden\"; // not 'display: none' because we want rendering\n  // Transfer the element's properties to the div\n\n  properties.forEach(function (prop) {\n    style[prop] = computed[prop];\n  });\n\n  if (isFirefox) {\n    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n    if (element.scrollHeight > parseInt(computed.height)) style.overflowY = \"scroll\";\n  } else {\n    style.overflow = \"hidden\"; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n  }\n\n  div.textContent = element.value.substring(0, element.selectionStart);\n\n  if (append) {\n    div.textContent += append;\n  }\n\n  var span = document.createElement(\"span\"); // Wrapping must be replicated *exactly*, including when a long word gets\n  // onto the next line, with whitespace at the end of the line before (#7).\n  // The  *only* reliable way to do that is to copy the *entire* rest of the\n  // textarea's content into the <span> created at the caret position.\n  // For inputs, just '.' would be enough, but no need to bother.\n\n  span.textContent = element.value.substring(element.selectionEnd) || \".\"; // || because a completely empty faux span doesn't render at all\n\n  div.appendChild(span);\n  var coordinates = {\n    top: span.offsetTop + parseInt(computed[\"borderTopWidth\"]),\n    left: span.offsetLeft + parseInt(computed[\"borderLeftWidth\"]),\n    lineHeight: parseInt(computed[\"lineHeight\"])\n  };\n  document.body.removeChild(div);\n  return coordinates;\n}\n\nexports.getCaretCoordinates = getCaretCoordinates;","map":{"version":3,"names":["Object","defineProperty","exports","value","getCaretCoordinates","properties","isBrowser","window","isFirefox","mozInnerScreenX","element","append","Error","div","document","createElement","id","body","appendChild","style","computed","getComputedStyle","currentStyle","whiteSpace","wordWrap","position","visibility","forEach","prop","scrollHeight","parseInt","height","overflowY","overflow","textContent","substring","selectionStart","span","selectionEnd","coordinates","top","offsetTop","left","offsetLeft","lineHeight","removeChild"],"sources":["C:/Users/thewi/Downloads/scrimba/notes/node_modules/react-mde/lib/js/util/TextAreaCaretPosition.js"],"sourcesContent":["\"use strict\";\n/* jshint browser: true */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCaretCoordinates = void 0;\n// We'll copy the properties below into the mirror div.\n// Note that some browsers, such as Firefox, do not concatenate properties\n// into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\n// so we have to list every single property explicitly.\nvar properties = [\n    \"direction\",\n    \"boxSizing\",\n    \"width\",\n    \"height\",\n    \"overflowX\",\n    \"overflowY\",\n    \"borderTopWidth\",\n    \"borderRightWidth\",\n    \"borderBottomWidth\",\n    \"borderLeftWidth\",\n    \"borderStyle\",\n    \"paddingTop\",\n    \"paddingRight\",\n    \"paddingBottom\",\n    \"paddingLeft\",\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n    \"fontStyle\",\n    \"fontVariant\",\n    \"fontWeight\",\n    \"fontStretch\",\n    \"fontSize\",\n    \"fontSizeAdjust\",\n    \"lineHeight\",\n    \"fontFamily\",\n    \"textAlign\",\n    \"textTransform\",\n    \"textIndent\",\n    \"textDecoration\",\n    \"letterSpacing\",\n    \"wordSpacing\",\n    \"tabSize\",\n    \"MozTabSize\"\n];\nvar isBrowser = typeof window !== \"undefined\";\nvar isFirefox = isBrowser && window.mozInnerScreenX != null;\nfunction getCaretCoordinates(element, append) {\n    if (!isBrowser) {\n        throw new Error(\"getCaretCoordinates should only be called in a browser\");\n    }\n    // The mirror div will replicate the textarea's style\n    var div = document.createElement(\"div\");\n    div.id = \"input-textarea-caret-position-mirror-div\";\n    document.body.appendChild(div);\n    var style = div.style;\n    var computed = window.getComputedStyle\n        ? window.getComputedStyle(element)\n        : element.currentStyle; // currentStyle for IE < 9\n    // Default textarea styles\n    style.whiteSpace = \"pre-wrap\";\n    style.wordWrap = \"break-word\"; // only for textarea-s\n    // Position off-screen\n    style.position = \"absolute\"; // required to return coordinates properly\n    style.visibility = \"hidden\"; // not 'display: none' because we want rendering\n    // Transfer the element's properties to the div\n    properties.forEach(function (prop) {\n        style[prop] = computed[prop];\n    });\n    if (isFirefox) {\n        // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n        if (element.scrollHeight > parseInt(computed.height))\n            style.overflowY = \"scroll\";\n    }\n    else {\n        style.overflow = \"hidden\"; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n    }\n    div.textContent = element.value.substring(0, element.selectionStart);\n    if (append) {\n        div.textContent += append;\n    }\n    var span = document.createElement(\"span\");\n    // Wrapping must be replicated *exactly*, including when a long word gets\n    // onto the next line, with whitespace at the end of the line before (#7).\n    // The  *only* reliable way to do that is to copy the *entire* rest of the\n    // textarea's content into the <span> created at the caret position.\n    // For inputs, just '.' would be enough, but no need to bother.\n    span.textContent = element.value.substring(element.selectionEnd) || \".\"; // || because a completely empty faux span doesn't render at all\n    div.appendChild(span);\n    var coordinates = {\n        top: span.offsetTop + parseInt(computed[\"borderTopWidth\"]),\n        left: span.offsetLeft + parseInt(computed[\"borderLeftWidth\"]),\n        lineHeight: parseInt(computed[\"lineHeight\"])\n    };\n    document.body.removeChild(div);\n    return coordinates;\n}\nexports.getCaretCoordinates = getCaretCoordinates;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}